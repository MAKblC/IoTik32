#include <WiFi.h>  // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è Wi-Fi
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>                           // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¢–µ–ª–µ–≥—Ä–∞–º
#define WIFI_SSID "XXXXXX"                                  // –ª–æ–≥–∏–Ω Wi-Fi
#define WIFI_PASSWORD "XXXXXXXXX"                           // –ø–∞—Ä–æ–ª—å Wi-Fi
#define BOT_TOKEN "917994990:XXXXXXXXXXXXXXooDvr-RPiM4PUc"  // —Ç–æ–∫–µ–Ω
const unsigned long BOT_MTBS = 1000;                        // –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
WiFiClientSecure secured_client;                            // –∫–ª–∏–µ–Ω—Ç SSL (TLS)
UniversalTelegramBot bot(BOT_TOKEN, secured_client);        // —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
unsigned long bot_lasttime;                                 // —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏

#define LED 18  // 4

String chat_id;
String text;
int message_id;
bool flag = false;  // –¥–ª—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞

void setup() {
  Serial.begin(115200);
  pinMode(LED, OUTPUT);
  digitalWrite(LED, LOW);  // –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
  delay(512);
  Serial.println();
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);                 // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);  // —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
  while (WiFi.status() != WL_CONNECTED)                 // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  if (millis() - bot_lasttime > BOT_MTBS)  // –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  {
    // –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    // –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ
    while (numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    // –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–æ—Å–∞
    bot_lasttime = millis();
  }
}

// —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
void handleNewMessages(int numNewMessages) {
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);
  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  for (int i = 0; i < numNewMessages; i++) {
    message_id = bot.messages[i].message_id;
    chat_id = bot.messages[i].chat_id;
    text = bot.messages[i].text;
    text.toLowerCase();                            // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    String from_name = bot.messages[i].from_name;  // –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (from_name == "")
      from_name = "Guest";
    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (bot.messages[i].type == "callback_query") {
      if (text == "/menu") {
        String sms = "[[{\"text\" : \"–ò–Ω—Ñ–æ –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ\", \"callback_data\" : \"/info\"},{\"text\" : \"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º\", \"callback_data\" : \"/ledcontrol\"}]]";
        String mail = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n";
        bot.sendMessageWithInlineKeyboard(chat_id, mail, "Markdown", sms, message_id);
      } else {
        label();
      }
    } else {
      if (text == "/start") {
        String sms = "[[{\"text\" : \"–ú–µ–Ω—é\", \"callback_data\" : \"/menu\" }]]";
        String mail = "–ü—Ä–∏–≤–µ—Ç! üëã\n";
        mail += "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ\n\n";
        mail += "*–ù–∞–∂–º–∏ –Ω–∞ ¬´–ú–µ–Ω—é¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª –∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ ‚Üì‚Üì‚Üì* \n\n";
        bot.sendMessageWithInlineKeyboard(chat_id, mail, "Markdown", sms);
      } else {
        String sms = "[[ { \"text\" : \"‚ò∞ –í –º–µ–Ω—é\", \"callback_data\" : \"/menu\" }]]";
        String mail = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üì‚Üì‚Üì\n";
        bot.sendMessageWithInlineKeyboard(chat_id, mail, "Markdown", sms);
      }
    }
  }
}

void label() {
  String mail = "";
  String sms = "";
  if (text == "/info") {
    sms = "[[ { \"text\" : \"‚ò∞ –í –º–µ–Ω—é\", \"callback_data\" : \"/menu\" }]]";
    mail += "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ:* \n";
    mail += "–ú–æ–¥–µ–ª—å —á–∏–ø–∞: " + String(ESP.getChipModel()) + "\n";
    mail += "–ù–æ–º–µ—Ä —Ä–µ–≤–∏–∑–∏–∏ —á–∏–ø–∞: " + String(ESP.getChipRevision()) + "\n";
    mail += "–í–µ—Ä—Å–∏—è SDK: " + String(ESP.getSdkVersion()) + "\n";
    mail += "–†–∞–∑–º–µ—Ä —Ñ–ª–µ—à-–ø–∞–º—è—Ç–∏: " + String(ESP.getFlashChipSize()) + " –±–∞–π—Ç\n";
    mail += "–ß–∞—Å—Ç–æ—Ç–∞ —á–∏–ø–∞: " + String(ESP.getFlashChipSpeed()) + " –ì—Ü\n";
  } else if (text == "/ledcontrol") {
    sms += "[[{ \"text\" : \"‚ò∞ –í –º–µ–Ω—é\", \"callback_data\" : \"/menu\" }],";
    sms += "[{ \"text\" : \"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\", \"callback_data\" : \"/led\" }]]";
    mail = "*–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞: *";
  } else if (text == "/led") {
    sms += "[[{ \"text\" : \"‚ò∞ –í –º–µ–Ω—é\", \"callback_data\" : \"/menu\" }],";
    // –ø—Ä–æ–≤–µ—Ä–∫–∞, –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç –≤–ø–∏—Å–∞—Ç—å –≤ –ø–ª–∞—à–∫—É –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–µ
    if (flag) {
      sms += "[{ \"text\" : \"–í–ö–õ üü£";
      digitalWrite(LED, HIGH);  // –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
    } else {
      sms += "[{ \"text\" : \"–í–´–ö–õ ‚ö´Ô∏è";
      digitalWrite(LED, LOW);  // –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
    }
    sms += "  \", \"callback_data\" : \"/led\" }]]";
    flag = !flag;  // —Å–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    mail = "*–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞: *";
  } else {
    sms = "[[ { \"text\" : \"‚ò∞ –í –º–µ–Ω—é\", \"callback_data\" : \"/menu\" }]]";
    mail = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üì‚Üì‚Üì\n";
  }
  bot.sendMessageWithInlineKeyboard(chat_id, mail, "Markdown", sms, message_id);
}
